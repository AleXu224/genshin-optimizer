{"version":3,"file":"static/js/558.35fa426f.chunk.js","mappings":"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","sources":["Formula/reaction.ts","Data/Characters/dataUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/ForestRegalia/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/MakhairaAquamarine/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/KagotsurubeIsshin/index.tsx","Data/Weapons/Sword/KeyOfKhajNisut/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HaranGeppakuFutsu/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SapwoodBlade/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/MissiveWindspear/index.tsx","Data/Weapons/Polearm/Moonpiercer/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/StaffOfTheScarletSands/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/AquaSimulacra/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FadingTwilight/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/HuntersPath/index.tsx","Data/Weapons/Bow/KingsSquire/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/EndOfTheLine/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/AThousandFloatingDreams/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/FruitOfFulfillment/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../KeyMap/StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { infusionNode, input } from \"./index\";\r\nimport { constant, data, equal, frac, infoMut, lookup, one, percent, prod, subscript, sum } from \"./utils\";\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers, { key: \"crystallize_level_multi\" })\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(\r\n  infoMut(sum(one, /** + Crystallize bonus */ crystallizeElemas), { pivot: true, key: \"base_crystallize_multi\" }),\r\n  crystallizeMulti1),\r\n  { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers, { key: \"transformative_level_multi\" })\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap(Object.keys(transformativeReactions), reaction => {\r\n    const { multi, resist } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      prod(constant(multi, { key: `${reaction}_multi` }), transMulti1),\r\n      sum(\r\n        infoMut(sum(one, transMulti2), { pivot: true, key: \"base_transformative_multi\" }),\r\n        input.total[`${reaction}_dmg_`]\r\n      ),\r\n      lookup(input.hit.hitMode, {\r\n        hit: one,\r\n        critHit: sum(one, input.total[`${reaction}_critDMG_`]),\r\n        avgHit: sum(one, prod(input.total[`${reaction}_critRate_`], input.total[`${reaction}_critDMG_`])),\r\n      }, NaN),\r\n      input.enemy[`${resist}_resMulti`]\r\n    ), { key: `${reaction}_hit` })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => {\r\n    const base = prod(\r\n      prod(constant(transformativeReactions.swirl.multi, { key: \"swirl_multi\" }), transMulti1),\r\n      sum(infoMut(sum(one, transMulti2), { pivot: true, key: \"base_transformative_multi\" }), input.total.swirl_dmg_)\r\n    )\r\n    const res = input.enemy[`${ele}_resMulti`]\r\n    return infoMut(\r\n      // CAUTION:\r\n      // Add amp multiplier/additive term only to swirls that have amp/additive reactions.\r\n      // It is wasteful to add them indiscriminately, but this means\r\n      // that we need to audit and add appropriate elements here\r\n      // should amp/additive reactions be added to more swirls.\r\n      [\"pyro\", \"hydro\", \"cryo\", \"electro\"].includes(ele)\r\n        ? (ele === \"electro\"\r\n          // Additive reactions apply the additive term before resistance, but after swirl bonuses\r\n          ? data(prod(sum(base, input.hit.addTerm), res), { hit: { ele: constant(ele) } })\r\n          // Amp reaction\r\n          : data(prod(base, res, input.hit.ampMulti), { hit: { ele: constant(ele) } }))\r\n        : prod(base, res),\r\n      { key: `${ele}_swirl_hit` })\r\n  })\r\n}\r\nconst infusionReactions = {\r\n  overloaded: equal(infusionNode, \"pyro\", trans.overloaded, { key: \"overloaded_hit\" }),\r\n  electrocharged: equal(infusionNode, \"hydro\", trans.electrocharged, { key: \"electrocharged_hit\" }),\r\n  superconduct: equal(infusionNode, \"cryo\", trans.superconduct, { key: \"superconduct_hit\" }),\r\n  burning: equal(infusionNode, \"pyro\", trans.burning, { key: \"burning_hit\" }),\r\n  bloom: equal(infusionNode, \"hydro\", trans.bloom, { key: \"bloom_hit\" }),\r\n  burgeon: equal(infusionNode, \"pyro\", trans.burgeon, { key: \"burgeon_hit\" }),\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    bloom: trans.bloom,\r\n    burgeon: trans.burgeon,\r\n    hyperbloom: trans.hyperbloom,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    hyperbloom: trans.hyperbloom,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n    bloom: trans.bloom,\r\n    overloaded: infusionReactions.overloaded,\r\n    superconduct: infusionReactions.superconduct,\r\n    burning: infusionReactions.burning,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    burgeon: trans.burgeon,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    bloom: infusionReactions.bloom,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  dendro: {\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    bloom: trans.bloom,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    burgeon: infusionReactions.burgeon,\r\n  }\r\n}\r\n","import { SubstatKey } from \"pipeline\";\r\nimport { infusionNode, input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, lookup, one, percent, prod, stringPrio, subscript, sum } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\n\r\nconst inferredHitEle = stringPrio(\r\n  lookup(input.hit.move, {\r\n    \"skill\": input.charEle, \"burst\": input.charEle,\r\n  }, undefined),\r\n  lookup(input.weaponType, {\r\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\r\n    catalyst: input.charEle,\r\n  }, undefined),\r\n  \"physical\"\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(one, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healInc = input.total.healInc\r\n  const healNode = prod(sum(base, healInc), sum(one, input.total.heal_, input.total.incHeal_))\r\n\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  layeredAssignment(data, [\"teamBuff\", \"tally\", \"maxEleMas\"], input.premod.eleMas)\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Akuoumaru\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffSlasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DebateClub\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FerrousShadow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\r\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\r\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\r\n    // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_,\r\n        }, {\r\n          text: trm(\"resistance\")\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ForestRegalia\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 75, 90, 105, 120]\r\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\r\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(eleMas_disp, { key: \"ele_mas\" }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: skill_dmg_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LuxuriousSeaLord\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\r\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\r\nconst dmg = equal(input.weapon.key, key, equal(condPassive, 'on',\r\n  customDmgNode(prod(\r\n    subscript(\r\n      input.weapon.refineIndex, dmg_Src, { key: \"_\" }),\r\n      input.total.atk\r\n    ),\r\n    \"elemental\",\r\n    { hit: { ele: constant(\"physical\") }\r\n})))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }],\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st('hitOp.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","\r\nimport { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MakhairaAquamarine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst atk_arr = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atkSelf = equal(input.weapon.key, key, equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, atk_arr, { key: \"_\" }),\r\n    input.premod.eleMas\r\n  )\r\n))\r\nconst atkTeamDisp = equal(input.weapon.key, key, prod(percent(0.3), atkSelf))\r\nconst atkTeam = unequal(input.activeCharKey, input.charKey, atkTeamDisp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk: atkSelf\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      atk: atkTeam\r\n    }\r\n  }\r\n}, {\r\n  atkSelf,\r\n  atkTeamDisp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    path: condPassivePath,\r\n    value: condPassive,\r\n    teamBuff: true,\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkSelf\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }],\r\n      }\r\n    }\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    canShow: equal(condPassive, \"on\", 1),\r\n    fields: [{\r\n      node: infoMut(atkTeamDisp, { key: \"atk\", isTeamBuff: true }),\r\n    }, {\r\n        text: sgt(\"duration\"),\r\n        value: 12,\r\n        unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OldMercsPal\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeArchaic\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { key: \"sheet:dmg\" }) }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rainslasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RedhornStonethresher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { key: \"_\" }), input.premod.def))\r\nconst charged_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { key: \"_\" }), input.premod.def))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    def_,\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n  }\r\n}, {\r\n  normal_dmgInc,\r\n  charged_dmgInc,\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: def_\r\n    }, {\r\n      node: normal_dmgInc\r\n    }, {\r\n      node: charged_dmgInc\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"opponentsDamaged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SerpentSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { key: \"_\" })\r\nconst all_dmg_stack = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: all_dmg_stack\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: {\r\n      ...objectKeyMap(range(1, 5), i => ({\r\n        name: st(\"seconds\", { count: i * 4 }),\r\n        fields: [{\r\n          node: all_dmg_stack\r\n        }, {\r\n          text: trm(\"takeMoreDmg\"),\r\n          value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\r\n          unit: \"%\"\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardPride\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: all_dmg_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SnowTombedStarsilver\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SongOfBrokenPines\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { key: \"_\" })\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n      atkSPD_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customShieldNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBell\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\r\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\r\nconst shield = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { key: \"_\" }), input.total.hp))))\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst all_dmg_ = equal(condWithShield, \"protected\", subscript(input.weapon.refineIndex, allDmgSrc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n}, {\r\n  shield\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"takeDmg\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(shield, { key: `sheet_gen:dmgAbsorption` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 45,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheUnforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"WasterGreatsword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Whiteblind\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteIronGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\r\nconst heal = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.total.hp))))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('afterDefeatEnemy'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\" })\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WolfsGravestone\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"enemyLessPercentHP\", { percent: 30 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport Akuoumaru from \"./Akuoumaru\"\r\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\r\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\r\nimport DebateClub from \"./DebateClub\"\r\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\r\nimport FerrousShadow from \"./FerrousShadow\"\r\nimport ForestRegalia from \"./ForestRegalia\"\r\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\r\nimport LithicBlade from \"./LithicBlade\"\r\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\r\nimport MakhairaAquamarine from \"./MakhairaAquamarine\"\r\nimport OldMercsPal from \"./OldMercsPal\"\r\nimport PrototypeArchaic from \"./PrototypeArchaic\"\r\nimport Rainslasher from \"./Rainslasher\"\r\nimport RedhornStonethresher from \"./RedhornStonethresher\"\r\nimport RoyalGreatsword from \"./RoyalGreatsword\"\r\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\r\nimport SerpentSpine from \"./SerpentSpine\"\r\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\r\nimport SkywardPride from \"./SkywardPride\"\r\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\r\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\r\nimport TheBell from \"./TheBell\"\r\nimport TheUnforged from \"./TheUnforged\"\r\nimport WasterGreatsword from \"./WasterGreatsword\"\r\nimport Whiteblind from \"./Whiteblind\"\r\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\r\nimport WolfsGravestone from \"./WolfsGravestone\"\r\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\r\n  Akuoumaru,\r\n  BlackcliffSlasher,\r\n  BloodtaintedGreatsword,\r\n  DebateClub,\r\n  FavoniusGreatsword,\r\n  FerrousShadow,\r\n  ForestRegalia,\r\n  KatsuragikiriNagamasa,\r\n  LithicBlade,\r\n  LuxuriousSeaLord,\r\n  MakhairaAquamarine,\r\n  OldMercsPal,\r\n  PrototypeArchaic,\r\n  Rainslasher,\r\n  RedhornStonethresher,\r\n  RoyalGreatsword,\r\n  SacrificialGreatsword,\r\n  SerpentSpine,\r\n  SkyriderGreatsword,\r\n  SkywardPride,\r\n  SnowTombedStarsilver,\r\n  SongOfBrokenPines,\r\n  TheBell,\r\n  TheUnforged,\r\n  WasterGreatsword,\r\n  Whiteblind,\r\n  WhiteIronGreatsword,\r\n  WolfsGravestone,\r\n} as const\r\nexport default claymore\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmenomaKageuchi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquilaFavonia\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\r\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\r\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\r\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\r\nconst heal = equal(input.weapon.key, key, equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.premod.atk)))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n  },\r\n}, {\r\n  heal, dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('takeDmg'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"heal\" })\r\n        }, {\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CinnabarSpindle\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\r\nconst skill_dmgInc = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { key: \"_\" }), input.premod.def)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { // TODO: should be total\r\n    skill_dmgInc\r\n  }\r\n}, {\r\n  skill_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmgInc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CoolSteel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagotsurubeIsshin\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_ = equal(condPassive, \"on\", percent(0.15)) // No refinement data\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customDmgNode(prod(percent(1.8), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"hitOp.normalChargedOrPlunging\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KeyOfKhajNisut\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst emSrc = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024];\r\nconst temSrc = [0.002, 0.0025, 0.003, 0.0035, 0.004];\r\nconst stacks = [1, 2, 3];\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\");\r\nconst eleMasbuff = prod(input.total.hp, lookup(\r\n  condStacks,\r\n  objectKeyMap(stacks, (stack) =>\r\n    prod(subscript(input.weapon.refineIndex, emSrc), stack)\r\n  ),\r\n  naught\r\n));\r\nconst teamEleMasbuff = equal(\"3\", condStacks, prod(\r\n  input.total.hp,\r\n  lookup(\r\n    condStacks,\r\n    objectKeyMap(stacks, (stack) => subscript(input.weapon.refineIndex, temSrc)),\r\n    naught\r\n  )\r\n));\r\n\r\nconst hpBonus = [0.2, 0.25, 0.3, 0.35, 0.4];\r\nconst hp_ = subscript(input.weapon.refineIndex, hpBonus);\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas: eleMasbuff,\r\n    hp_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: teamEleMasbuff\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [\r\n    {\r\n      header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n      fields: [{node: hp_}],\r\n    },\r\n    {\r\n      path: condStacksPath,\r\n      value: condStacks,\r\n      teamBuff: true,\r\n      header: headerTemplate(key, icon, iconAwaken),\r\n      name: st(\"hitOp.skill\"),\r\n      states: objectKeyMap(stacks, i => ({\r\n        name: st(\"hits\", { count: i}),\r\n        fields: [{node: eleMasbuff }, {node: teamEleMasbuff}]\r\n      }))\r\n    },\r\n  ],\r\n};\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DarkIronSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.electro\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FesteringDesire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { key: '_' })\r\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { key: '_' })\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    skill_critRate_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_\r\n    }, {\r\n      node: skill_critRate_\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FilletBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\r\nconst cd_Src = [15, 14, 13, 12, 11]\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\r\n      unit: \"s\"\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: dmg_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"sigilsConsumed\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: normal_dmg_\r\n        }, {\r\n          node: charged_dmg_\r\n        }, {\r\n          node: plunging_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HaranGeppakuFutsu\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stack_normal_dmg_ = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPath, condNode] = cond(key, \"HonedFlow\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\r\n))\r\nconst normal_dmg_ = lookup(condNode,\r\n  objectKeyMap(range(1, 2), i => prod(i, subscript(input.weapon.refineIndex, stack_normal_dmg_)))\r\n  , naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...passive_dmg_,\r\n    normal_dmg_,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [ // Passive\r\n      ...allElements.map((ele) => {\r\n        return { node: passive_dmg_[`${ele}_dmg_`] }\r\n      })\r\n    ],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"consumed\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HarbingerOfDawn\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\r\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"greaterPercentHP\", { percent: 90 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: critRate_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"IronSting\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\r\nconst eleDmgDealtStack = range(1, 2)\r\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\r\n  subscript(input.weapon.refineIndex, allDmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(eleDmgDealtStack.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_,\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LionsRoar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MistsplitterReforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst stacks = [\"1\", \"2\", \"3\"] as const\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stacksRefine = {\r\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\r\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\r\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\r\n}\r\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\r\n))\r\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  equal(input.charEle, ele,\r\n    lookup(condNode, objectKeyMap(stacks, stack =>\r\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, { key: `${ele}_dmg_`, variant: ele })\r\n  )]\r\n))\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\r\n))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: allElements.map(ele => (\r\n      { node: passive_dmg_[`${ele}_dmg_`] }\r\n    ))\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"emblem\"),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(\r\n      stacks.map(stack => [stack, {\r\n        name: st(\"stack\", { count: parseInt(stack) }),\r\n        fields: allElements.map(ele => ({\r\n          node: stacks_dmg_[`${ele}_dmg_`]\r\n        }))\r\n      }])\r\n    )\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeCutter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\r\nconst atk = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, atkSrc, { key: \"_\" }), input.premod.hp))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk\r\n  }\r\n}, {\r\n  atk\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: hp_ }, { node: atk }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeRancour\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"onHit\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SapwoodBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 75, 90, 105, 120]\r\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\r\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas\r\n    },\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(eleMas_disp, { key: \"eleMas\" }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SilverSword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    moveSPD_,\r\n    atkSPD_,\r\n  }\r\n}, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: critRate_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st('afterUse.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: moveSPD_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SummitShaper\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SwordOfDescension\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = equal(\"Traveler\", input.charKey, 66)\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk\r\n  }\r\n}, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk\r\n    }, {\r\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheAlleyFlash\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBlackSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.atk)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n}, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }, {\r\n      node: infoMut(heal, { key: \"sheet_gen:healing\" })\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheFlute\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TravelersHandySword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.hp)))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: infoMut(heal, { key: \"sheet_gen:healing\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponSwordKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\r\nimport AquilaFavonia from \"./AquilaFavonia\"\r\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\r\nimport CinnabarSpindle from \"./CinnabarSpindle\"\r\nimport CoolSteel from \"./CoolSteel\"\r\nimport KagotsurubeIsshin from \"./KagotsurubeIsshin\"\r\nimport KeyOfKhajNisut from \"./KeyOfKhajNisut\"\r\nimport DarkIronSword from \"./DarkIronSword\"\r\nimport DullBlade from \"./DullBlade\"\r\nimport FavoniusSword from \"./FavoniusSword\"\r\nimport FesteringDesire from \"./FesteringDesire\"\r\nimport FilletBlade from \"./FilletBlade\"\r\nimport FreedomSworn from \"./FreedomSworn\"\r\nimport HaranGeppakuFutsu from \"./HaranGeppakuFutsu\"\r\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\r\nimport IronSting from \"./IronSting\"\r\nimport LionsRoar from \"./LionsRoar\"\r\nimport MistsplitterReforged from \"./MistsplitterReforged\"\r\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\r\nimport PrototypeRancour from \"./PrototypeRancour\"\r\nimport RoyalLongsword from \"./RoyalLongsword\"\r\nimport SacrificialSword from \"./SacrificialSword\"\r\nimport SapwoodBlade from \"./SapwoodBlade\"\r\nimport SilverSword from \"./SilverSword\"\r\nimport SkyriderSword from \"./SkyriderSword\"\r\nimport SkywardBlade from \"./SkywardBlade\"\r\nimport SummitShaper from \"./SummitShaper\"\r\nimport SwordOfDescension from \"./SwordOfDescension\"\r\nimport TheAlleyFlash from \"./TheAlleyFlash\"\r\nimport TheBlackSword from \"./TheBlackSword\"\r\nimport TheFlute from \"./TheFlute\"\r\nimport TravelersHandySword from \"./TravelersHandySword\"\r\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\r\n  AmenomaKageuchi,\r\n  AquilaFavonia,\r\n  BlackcliffLongsword,\r\n  CinnabarSpindle,\r\n  CoolSteel,\r\n  KagotsurubeIsshin,\r\n  KeyOfKhajNisut,\r\n  DarkIronSword,\r\n  DullBlade,\r\n  FavoniusSword,\r\n  FesteringDesire,\r\n  FilletBlade,\r\n  FreedomSworn,\r\n  HaranGeppakuFutsu,\r\n  HarbingerOfDawn,\r\n  IronSting,\r\n  LionsRoar,\r\n  MistsplitterReforged,\r\n  PrimordialJadeCutter,\r\n  PrototypeRancour,\r\n  RoyalLongsword,\r\n  SacrificialSword,\r\n  SapwoodBlade,\r\n  SilverSword,\r\n  SkyriderSword,\r\n  SkywardBlade,\r\n  SummitShaper,\r\n  SwordOfDescension,\r\n  TheAlleyFlash,\r\n  TheBlackSword,\r\n  TheFlute,\r\n  TravelersHandySword,\r\n} as const\r\nexport default sword\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"BlackcliffPole\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { compareEq, constant, lookup, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  compareEq(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { key: `weapon_${key}:inactiveKey` })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i, { key: \"sheet:stacks\" })), 0),\r\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n  }, {\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: tr(\"passiveName\"),\r\n    states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: atkInc }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CrescentPike\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\r\nconst hit = equal(input.weapon.key, key,\r\n  equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" })), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { hit })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(hit, { key: `weapon_${key}:hitName` })\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Deathmatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }) }, naught)\r\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      \"oneOrNone\": {\r\n        name: trm(\"opponents.oneOrNone\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n      \"moreThanOne\": {\r\n        name: trm(\"opponents.moreThanOne\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonsBane\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonspineSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EngulfingLightning\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\r\nconst atk_ = equal(input.weapon.key, key,\r\n  min(prod(subscript(input.weapon.refineIndex, atk), sum(input.premod.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax)))\r\n\r\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\r\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\r\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    enerRech_\r\n  },\r\n}, {\r\n  atk_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusLance\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Halberd\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"IronPoint\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KitainCrossSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MissiveWindspear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst emArr = [48, 60, 72, 84, 96]\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_arr, { key: \"_\" }))\r\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, emArr))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    eleMas,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterReaction\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          node: eleMas,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Moonpiercer\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atk_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, atk_arr, { key: \"_\" }))\r\nconst atk_ = equal(input.activeCharKey, target.charKey, atk_disp)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk_disp, { key: \"atk_\" }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\r\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { key: \"_\" }))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.none\"),\r\n    states: Object.fromEntries(range(1, 7).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: all_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeStarglitter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: Object.fromEntries(range(1, 2).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\r\nconst atkSPD_ = percent(0.12)\r\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    atkSPD_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critRate_,\r\n    }, {\r\n      node: atkSPD_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfHoma\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\r\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { key: \"_\" })\r\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\r\nconst atk1 = prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), input.premod.hp)\r\nconst atk2 = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { key: \"_\" }), input.premod.hp), { key: \"atk\" }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk: sum(atk1, atk2)\r\n  }\r\n}, {\r\n  atk2_: atk2\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: hp_\r\n    }, {\r\n      node: infoMut(atk1, { key: \"atk\" })\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: st(\"lessPercentHP\", { percent: 50 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk2, { key: \"atk\" }),\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfTheScarletSands\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\r\n\r\nconst baseAtkArr = [0.52, 0.65, 0.78, 0.91, 1.04]\r\nconst stacksAttArr = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst stacksArr = range(1, 3)\r\nconst baseAtk = equal(input.weapon.key, key, prod(\r\n  subscript(input.weapon.refineIndex, baseAtkArr, { key: \"_\" }),\r\n  input.premod.eleMas\r\n), { key: \"atk\" })\r\nconst stacksAtk = lookup(condStacks, Object.fromEntries(stacksArr.map(stack => [\r\n  stack,\r\n  prod(\r\n    stack,\r\n    subscript(input.weapon.refineIndex, stacksAttArr, { key: \"_\" }),\r\n    input.premod.eleMas\r\n  )\r\n])), naught, { key: \"atk\" })\r\nconst atk = equal(input.weapon.key, key, sum(baseAtk, stacksAtk))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk\r\n  },\r\n}, {\r\n  atk\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: baseAtk\r\n    }],\r\n  }, {\r\n    value: condStacks,\r\n    path: condStacksPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.skill\"),\r\n    states: Object.fromEntries(stacksArr.map(i =>\r\n      [i, {\r\n        name: st(\"hits\", { count: i }),\r\n        fields: [{\r\n          node: stacksAtk\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheCatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\r\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_,\r\n    burst_critRate_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"VortexVanquisher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WavebreakersFin\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponPoleArmKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport BeginnersProtector from './BeginnersProtector'\r\nimport BlackcliffPole from './BlackcliffPole'\r\nimport BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\nimport CrescentPike from './CrescentPike'\r\nimport Deathmatch from './Deathmatch'\r\nimport DragonsBane from './DragonsBane'\r\nimport DragonspineSpear from './DragonspineSpear'\r\nimport EngulfingLightning from './EngulfingLightning'\r\nimport FavoniusLance from './FavoniusLance'\r\nimport Halberd from './Halberd'\r\nimport IronPoint from './IronPoint'\r\nimport KitainCrossSpear from './KitainCrossSpear'\r\nimport LithicSpear from './LithicSpear'\r\nimport MissiveWindspear from './MissiveWindspear'\r\nimport Moonpiercer from './Moonpiercer'\r\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\nimport PrototypeStarglitter from './PrototypeStarglitter'\r\nimport RoyalSpear from './RoyalSpear'\r\nimport SkywardSpine from './SkywardSpine'\r\nimport StaffOfHoma from './StaffOfHoma'\r\nimport StaffOfTheScarletSands from './StaffOfTheScarletSands'\r\nimport TheCatch from './TheCatch'\r\nimport VortexVanquisher from './VortexVanquisher'\r\nimport WavebreakersFin from './WavebreakersFin'\r\nimport WhiteTassel from './WhiteTassel'\r\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\r\n  BeginnersProtector,\r\n  BlackcliffPole,\r\n  BlackTassel,\r\n  CalamityQueller,\r\n  CrescentPike,\r\n  Deathmatch,\r\n  DragonsBane,\r\n  DragonspineSpear,\r\n  EngulfingLightning,\r\n  FavoniusLance,\r\n  Halberd,\r\n  IronPoint,\r\n  KitainCrossSpear,\r\n  LithicSpear,\r\n  MissiveWindspear,\r\n  Moonpiercer,\r\n  PrimordialJadeWingedSpear,\r\n  PrototypeStarglitter,\r\n  RoyalSpear,\r\n  SkywardSpine,\r\n  StaffOfHoma,\r\n  StaffOfTheScarletSands,\r\n  TheCatch,\r\n  VortexVanquisher,\r\n  WavebreakersFin,\r\n  WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AlleyHunter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst dmgInc = [.02, .025, .03, .035, .04]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\r\nconst all_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 10).map(c => [c, {\r\n      name: st(\"seconds\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmosBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"normal_dmg_\" })\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"charged_dmg_\" })\r\n\r\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\r\nconst normal_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"normal_dmg_\" })\r\nconst charged_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"charged_dmg_\" })\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\r\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 5), i => ({\r\n      name: st(\"seconds\", { count: i / 10 }),\r\n      fields: [{\r\n        node: normal_dmg_arrow_\r\n      }, {\r\n        node: charged_dmg_arrow_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquaSimulacra\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst hp_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst dmg_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst base_hp_ = subscript(input.weapon.refineIndex, hp_arr)\r\nconst cond_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_: base_hp_,\r\n    all_dmg_: cond_dmg_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: base_hp_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: cond_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst atkInc = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(range(1, 3).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 30,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CompoundBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.04, .05, .06, .07, .08]\r\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i))\r\n}, naught)\r\nconst atkSPD_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: atkSPD_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ElegyForTheEnd\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst eleMasInc = [60, 75, 90, 105, 120]\r\nconst eleMasInc2 = [100, 125, 150, 175, 200]\r\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\r\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, { key: \"eleMas\" })\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, { key: \"eleMas\" }))\r\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      eleMas: eleMas2\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: eleMas,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: eleMas2\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FadingTwilight\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\nconst state_dmg_dict = {\r\n  evengleam: subscript(input.weapon.refineIndex, [0.06, 0.075, 0.09, 0.105, 0.12]),\r\n  afterglow: subscript(input.weapon.refineIndex, [0.1, 0.125, 0.15, 0.175, 0.20]),\r\n  dawnblaze: subscript(input.weapon.refineIndex, [0.14, 0.175, 0.21, 0.245, 0.28])\r\n}\r\nconst state_dmg_ = lookup(condState, state_dmg_dict, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: state_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condState,\r\n    path: condStatePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(Object.keys(state_dmg_dict).map(state => [\r\n      state,\r\n      {\r\n        name: trm(`states.${state}`),\r\n        fields: [{ node: state_dmg_ }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Hamayumi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\r\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" })\r\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" })\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\r\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" }))\r\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg, normal_passive),\r\n    charged_dmg_: sum(charged_dmg, charged_passive)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg\r\n    }, {\r\n      node: charged_dmg\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_passive\r\n        }, {\r\n          node: charged_passive\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"HuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HuntersPath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst allEle_dmg_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, allEle_dmg_arr, { key: \"_\" })\r\n]))\r\n\r\nconst charged_dmgIncArr = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst charged_dmgInc = equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, charged_dmgIncArr, { key: \"_\" }),\r\n    input.total.eleMas\r\n  ))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_,\r\n    charged_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(allEle_dmg_).map(node => ({\r\n      node\r\n    }))\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.charged\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmgInc,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }, {\r\n          text: st(\"charges\"),\r\n          value: 12\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KingsSquire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 80, 100, 120, 140]\r\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, eleMasArr))\r\nconst dmg_arr = [1, 1.2, 1.4, 1.6, 1.8]\r\nconst dmg = equal(input.weapon.key, key, customDmgNode(\r\n  prod(\r\n    subscript(input.weapon.refineIndex, dmg_arr, { key: \"_\" }),\r\n    input.total.atk\r\n  ),\r\n  \"elemental\",\r\n))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.skillOrBurst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: eleMas,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\",\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Messenger\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MitternachtsWaltz\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\r\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\r\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\r\n\r\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\r\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skill\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkill,\r\n    path: condSkillPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MouunsMoon\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PolarStar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\r\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\r\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\n\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst atk_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\r\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    atk_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, percent, prod } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Predator\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normalInc = percent(.1)\r\nconst chargedInc = percent(.1)\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\r\n}, naught)\r\nconst charged_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\r\n}, naught)\r\nconst atk = equal(input.activeCharKey, \"Aloy\", 66)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    atk\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.cryo\"),\r\n    states: Object.fromEntries(range(1, 2).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }, {\r\n        node: charged_dmg_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeCrescent\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.36, .45, .54, .63, .72]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RavenBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RecurveBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healing_s = [.08, .10, .12, .14, .16]\r\nconst healing = equal(input.weapon.key, key,\r\n  customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s))))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { healing })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(healing, { key: \"sheet_gen:healing\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRate_s = [.08, .10, .12, .14, .16]\r\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\r\nconst critRate_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rust\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\r\n\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\r\nconst charged_dmg_ = constant(-0.1)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SeasonedHuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SharpshootersOath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\r\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    weakspotDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: weakspotDMG_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardHarp\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critd_s = [.20, .25, .30, .35, .40]\r\nconst dmgPerc = percent(1.25)\r\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critDMG_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critDMG_\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Slingshot\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmg_arr = [.36, .42, .48, .54, .60]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\r\nconst normal_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), { key: \"normal_dmg_\" })\r\nconst charged_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), { key: \"charged_dmg_\" })\r\nconst normal_dmg_dec = equal(condPassive, undefined, percent(-0.1, { key: \"normal_dmg_\" }))\r\nconst charged_dmg_dec = equal(condPassive, undefined, percent(-0.1, { key: \"charged_dmg_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_inc, normal_dmg_dec),\r\n    charged_dmg_: sum(charged_dmg_inc, charged_dmg_dec),\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_dec\r\n    }, {\r\n      node: charged_dmg_dec\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_inc\r\n        }, {\r\n          node: charged_dmg_inc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheStringless\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheViridescentHunt\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThunderingPulse\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    normal_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 3), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EndOfTheLine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgArr = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst dmg = equal(input.weapon.key, key, customDmgNode(\r\n  prod(\r\n    subscript(input.weapon.refineIndex, dmgArr, { key: \"_\" }),\r\n    input.total.atk\r\n  ),\r\n  \"elemental\"\r\n))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WindblumeOde\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.16, .20, .24, .28, .32]\r\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.skill\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponBowKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\n\r\nimport AlleyHunter from './AlleyHunter'\r\nimport AmosBow from \"./AmosBow\"\r\nimport AquaSimulacra from \"./AquaSimulacra\"\r\nimport BlackcliffWarbow from './BlackcliffWarbow'\r\nimport CompoundBow from './CompoundBow'\r\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\r\nimport FadingTwilight from \"./FadingTwilight\"\r\nimport FavoniusWarbow from './FavoniusWarbow'\r\nimport Hamayumi from './Hamayumi'\r\nimport HuntersBow from \"./HuntersBow\"\r\nimport HuntersPath from './HuntersPath'\r\nimport KingsSquire from './KingsSquire'\r\nimport Messenger from './Messenger'\r\nimport MitternachtsWaltz from './MitternachtsWaltz'\r\nimport MouunsMoon from './MouunsMoon'\r\nimport PolarStar from './PolarStar'\r\nimport Predator from './Predator'\r\nimport PrototypeCrescent from './PrototypeCrescent'\r\nimport RavenBow from './RavenBow'\r\nimport RecurveBow from './RecurveBow'\r\nimport RoyalBow from './RoyalBow'\r\nimport Rust from './Rust'\r\nimport SacrificialBow from \"./SacrificialBow\"\r\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\r\nimport SharpshootersOath from './SharpshootersOath'\r\nimport SkywardHarp from './SkywardHarp'\r\nimport Slingshot from './Slingshot'\r\nimport TheStringless from './TheStringless'\r\nimport TheViridescentHunt from './TheViridescentHunt'\r\nimport ThunderingPulse from './ThunderingPulse'\r\nimport EndOfTheLine from './EndOfTheLine'\r\nimport WindblumeOde from './WindblumeOde'\r\n\r\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\r\n  AlleyHunter,\r\n  AmosBow,\r\n  AquaSimulacra,\r\n  BlackcliffWarbow,\r\n  CompoundBow,\r\n  ElegyForTheEnd,\r\n  FadingTwilight,\r\n  FavoniusWarbow,\r\n  Hamayumi,\r\n  HuntersBow,\r\n  HuntersPath,\r\n  KingsSquire,\r\n  Messenger,\r\n  MitternachtsWaltz,\r\n  MouunsMoon,\r\n  PolarStar,\r\n  Predator,\r\n  PrototypeCrescent,\r\n  RavenBow,\r\n  RecurveBow,\r\n  RoyalBow,\r\n  Rust,\r\n  SacrificialBow,\r\n  SeasonedHuntersBow,\r\n  SharpshootersOath,\r\n  SkywardHarp,\r\n  Slingshot,\r\n  TheStringless,\r\n  TheViridescentHunt,\r\n  ThunderingPulse,\r\n  EndOfTheLine,\r\n  WindblumeOde,\r\n} as const\r\nexport default bow\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"ApprenticesNotes\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { input, tally } from \"../../../../Formula\";\r\nimport {\r\n  equal,\r\n  lookup,\r\n  prod,\r\n  subscript,\r\n  sum,\r\n  unequal,\r\n} from \"../../../../Formula/utils\";\r\nimport { allElements, WeaponKey } from \"../../../../Types/consts\";\r\nimport { st } from \"../../../SheetUtil\";\r\nimport { dataObjForWeaponSheet } from \"../../util\";\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\";\r\nimport iconAwaken from \"./AwakenIcon.png\";\r\nimport data_gen_json from \"./data_gen.json\";\r\nimport icon from \"./Icon.png\";\r\n\r\nconst key: WeaponKey = \"AThousandFloatingDreams\";\r\nconst data_gen = data_gen_json as WeaponData;\r\n\r\nconst sameEleBuff = [32, 40, 48, 56, 64];\r\nconst differentElemeBuff = [0.1, 0.14, 0.18, 0.22, 0.26];\r\nconst sameElementCount = lookup(input.charEle, tally, 0);\r\nconst differentElementCount = sum(\r\n  sum(...allElements.map((ele) => tally[ele])),\r\n  prod(sameElementCount, -1)\r\n);\r\n\r\nconst eleMas = prod(\r\n  subscript(input.weapon.refineIndex, sameEleBuff),\r\n  sum(sameElementCount, -1)\r\n);\r\n\r\n\r\nconst dmgBonus = prod(\r\n  subscript(input.weapon.refineIndex, differentElemeBuff),\r\n  differentElementCount\r\n  );\r\n\r\nconst eleDmg = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_dmg_`,\r\n  equal(input.charEle, ele, dmgBonus),\r\n  {key: `${ele}_dmg_`}\r\n]));\r\n\r\nconst teamEmBuff = [40, 42, 44, 46, 48];\r\nconst teamEmBuffValue = unequal(input.charKey, input.activeCharKey, subscript(input.weapon.refineIndex, teamEmBuff));\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n    ...eleDmg,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: teamEmBuffValue\r\n    }\r\n  }\r\n});\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [\r\n    {\r\n      header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n      fields: [\r\n        {\r\n          node: eleMas,\r\n        },\r\n        ...allElements.map(ele => ({\r\n          node: eleDmg[`${ele}_dmg_`],\r\n        }))\r\n      ],\r\n    },\r\n    {\r\n      teamBuff: true,\r\n      header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n      canShow: unequal(input.charKey, input.activeCharKey, 1),\r\n      fields: [\r\n        {\r\n          node: teamEmBuffValue\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n};\r\nexport default new WeaponSheet(key, sheet, data_gen, data);\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffAgate\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_,\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 30,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DodocoTales\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\r\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\r\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\r\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_,\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    name: st(\"hitOp.normal\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condCharged,\r\n    path: condChargedPath,\r\n    name: st(\"hitOp.charged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EmeraldOrb\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.hydro\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp))\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    heal_\r\n  }\r\n}, {\r\n  normal_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: trm(\"name\"),\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EyeOfPerception\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_: dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { key: \"sheet:dmg\" }) }],\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusCodex\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Frostbearer\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmgAoe,\r\n  dmgOnCryoOp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FruitOfFulfillment\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst eleMasArr = [24, 27, 30, 33, 36]\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\r\nconst stacksArr = range(1, 5)\r\nconst eleMas = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\r\n  stacks,\r\n  prod(\r\n    subscript(input.weapon.refineIndex, eleMasArr),\r\n    stacks\r\n  )\r\n])), naught)\r\n\r\nconst atk_ = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\r\n  stacks,\r\n  prod(\r\n    percent(-0.05),\r\n    stacks\r\n  )\r\n])), naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n    atk_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    path: condStacksPath,\r\n    value: condStacks,\r\n    name: trm(\"stackName\"),\r\n    states: Object.fromEntries(stacksArr.map(stack => [\r\n      stack,\r\n      {\r\n        name: st(\"stack\", { count: stack }),\r\n        fields: [{\r\n          node: eleMas,\r\n        }, {\r\n          node: atk_\r\n        }]\r\n      }\r\n    ]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HakushinRing\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\r\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\r\nconst anemo_dmg_disp  = equal(\"anemo\", condPassive, eleDmg)\r\nconst cryo_dmg_disp   = equal(\"cryo\", condPassive, eleDmg)\r\nconst geo_dmg_disp    = equal(\"geo\", condPassive, eleDmg)\r\nconst hydro_dmg_disp  = equal(\"hydro\", condPassive, eleDmg)\r\nconst pyro_dmg_disp   = equal(\"pyro\", condPassive, eleDmg)\r\nconst dendro_dmg_disp = equal(\"dendro\", condPassive, eleDmg)\r\nconst anemo_dmg_  = equal(\"anemo\", target.charEle, anemo_dmg_disp)\r\nconst cryo_dmg_   = equal(\"cryo\", target.charEle, cryo_dmg_disp)\r\nconst geo_dmg_    = equal(\"geo\", target.charEle, geo_dmg_disp)\r\nconst hydro_dmg_  = equal(\"hydro\", target.charEle, hydro_dmg_disp)\r\nconst pyro_dmg_   = equal(\"pyro\", target.charEle, pyro_dmg_disp)\r\nconst dendro_dmg_ = equal(\"dendro\", target.charEle, dendro_dmg_disp)\r\n\r\nconst electro_dmg_disp = unequal(condPassive, undefined, eleDmg)\r\nconst electro_dmg_ = equal(\"electro\", target.charEle, electro_dmg_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_dmg_,\r\n      cryo_dmg_,\r\n      electro_dmg_,\r\n      geo_dmg_,\r\n      hydro_dmg_,\r\n      pyro_dmg_,\r\n      dendro_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.electro\"),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      anemo: {\r\n        name: <ColorText color=\"swirl\">{sgt(\"reaction.swirl\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(anemo_dmg_disp, { key: \"anemo_dmg_\", variant: \"anemo\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      cryo: {\r\n        name: <ColorText color=\"superconduct\">{sgt(\"reaction.superconduct\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      geo: {\r\n        name: <ColorText color=\"crystallize\">{sgt(\"reaction.crystallize\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(geo_dmg_disp, { key: \"geo_dmg_\", variant: \"geo\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      pyro: {\r\n        name: <ColorText color=\"overloaded\">{sgt(\"reaction.overloaded\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(pyro_dmg_disp, { key: \"pyro_dmg_\", variant: \"pyro\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      hydro: {\r\n        name: <ColorText color=\"electrocharged\">{sgt(\"reaction.electrocharged\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(hydro_dmg_disp, { key: \"hydro_dmg_\", variant: \"hydro\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      dendro: {\r\n        name: <ColorText color=\"aggravate\">{sgt(\"reaction.aggravate\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dendro_dmg_disp, { key: \"dendro_dmg_\", variant: \"dendro\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagurasVerity\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\r\nconst totems = range(1, 3)\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\r\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_: sum(...skill_dmg_s),\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states:\r\n      Object.fromEntries(totems.map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: skill_dmg_s[i - 1]\r\n        },\r\n        ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst ele_dmg_s = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\r\n\r\nconst moveSPD_ = percent(0.1)\r\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s, { key: \"_\" })\r\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\r\n}, naught)]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    moveSPD_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: moveSPD_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"seconds\", { count: i * 4 }),\r\n      fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MagicGuide\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MappaMare\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\r\n\r\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\r\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\r\n}, naught)])\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: eleDmgs\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [...Object.values(eleDmgs).map(node => ({ node })), {\r\n        text: sgt(\"duration\"),\r\n        value: 10,\r\n        unit: \"s\"\r\n      }]\r\n    }))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MemoryOfDust\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OathswornEye\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\n\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    enerRech_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OtherworldlyStory\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(heal, { key: \"sheet_gen:healing\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PocketGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeAmber\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\r\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\r\n\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.burst\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{ node: infoMut(heal, { key: \"sheet_gen:healing\" }) }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialFragments\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardAtlas\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\n\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n  }\r\n}, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\r\n      {\r\n        node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n      }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SolarPearl\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\r\nconst burst_dmg_ = { ...skill_dmg_ }\r\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    normal_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      normal: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          node: burst_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skillOrBurst\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"TheWidsith\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\r\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\r\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\r\nconst eleBonus_ = Object.fromEntries(allElements.map(\r\n  ele => [ele, equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))]\r\n))\r\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n    eleMas\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: tr(\"passiveName\"),\r\n    states: {\r\n      aria: {\r\n        name: trm(\"aria\"),\r\n        fields: [\r\n          ...allElements.map(ele => ({ node: eleBonus_[ele] }))\r\n        ,{\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      interlude: {\r\n        name: trm(\"interlude\"),\r\n        fields: [{\r\n          node: eleMas\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      recitative: {\r\n        name: trm(\"recitative\"),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\r\nconst atk_Disp = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc))\r\nconst atk_ = unequal(input.activeCharKey, input.charKey, // Don't apply to wielding char\r\n  equal(input.activeCharKey, target.charKey, atk_Disp) // Only apply to active char\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm('condName'),\r\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk_Disp, { key: \"atk_\" })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TwinNephrite\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterDefeatEnemy\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WineAndSong\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterSprint\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponCatalystKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport ApprenticesNotes from './ApprenticesNotes'\r\nimport AThousandFloatingDreams from './AThousandFloatingDreams'\r\nimport BlackcliffAgate from './BlackcliffAgate'\r\nimport DodocoTales from './DodocoTales'\r\nimport EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\nimport EyeOfPerception from './EyeOfPerception'\r\nimport FavoniusCodex from './FavoniusCodex'\r\nimport Frostbearer from './Frostbearer'\r\nimport FruitOfFulfillment from './FruitOfFulfillment'\r\nimport HakushinRing from './HakushinRing'\r\nimport KagurasVerity from './KagurasVerity'\r\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\nimport MagicGuide from './MagicGuide'\r\nimport MappaMare from './MappaMare'\r\nimport MemoryOfDust from './MemoryOfDust'\r\nimport OathswornEye from './OathswornEye'\r\nimport OtherworldlyStory from './OtherworldlyStory'\r\nimport PocketGrimoire from './PocketGrimoire'\r\nimport PrototypeAmber from './PrototypeAmber'\r\nimport RoyalGrimoire from './RoyalGrimoire'\r\nimport SacrificialFragments from './SacrificialFragments'\r\nimport SkywardAtlas from './SkywardAtlas'\r\nimport SolarPearl from './SolarPearl'\r\nimport TheWidsith from './TheWidsith'\r\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\nimport TwinNephrite from './TwinNephrite'\r\nimport WineAndSong from './WineAndSong'\r\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\r\n  ApprenticesNotes,\r\n  AThousandFloatingDreams,\r\n  BlackcliffAgate,\r\n  DodocoTales,\r\n  EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  EyeOfPerception,\r\n  FavoniusCodex,\r\n  Frostbearer,\r\n  FruitOfFulfillment,\r\n  HakushinRing,\r\n  KagurasVerity,\r\n  LostPrayerToTheSacredWinds,\r\n  MagicGuide,\r\n  MappaMare,\r\n  MemoryOfDust,\r\n  OathswornEye,\r\n  OtherworldlyStory,\r\n  PocketGrimoire,\r\n  PrototypeAmber,\r\n  RoyalGrimoire,\r\n  SacrificialFragments,\r\n  SkywardAtlas,\r\n  SolarPearl,\r\n  TheWidsith,\r\n  ThrillingTalesOfDragonSlayers,\r\n  TwinNephrite,\r\n  WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["crystallizeMulti1","subscript","input","crystallizeLevelMultipliers","key","crystallizeElemas","prod","frac","crystallizeHit","infoMut","sum","one","pivot","variant","transMulti1","transformativeReactionLevelMultipliers","transMulti2","trans","objectKeyMap","Object","keys","transformativeReactions","reaction","multi","resist","constant","lookup","hit","critHit","avgHit","NaN","swirl","ele","base","res","includes","data","infusionReactions","overloaded","equal","infusionNode","electrocharged","superconduct","burning","bloom","burgeon","reactions","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","cryo","hydroSwirl","hydro","shattered","hyperbloom","geo","crystallize","fromEntries","absorbableEle","e","percent","dendro","charCurves","objectMap","_charCurves","value","values","commonBasic","inferredHitEle","stringPrio","undefined","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","additional","mergeData","customShieldNode","shieldNode","customHealNode","healInc","healNode","dmgNode","lvlMultiplier","talentType","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","weaponCurves","entries","_weaponCurves","dataObjForWeaponSheet","displayWeapon","total","weapon","type","mainStat","subStat","merging","mainStatNode","ascension","addStats","main","substatNode","sub","data_gen","data_gen_json","trm","cond","condPassivePath","condPassive","energyRange","range","i","ratio","max","burst_dmg_","min","naught","sheet","icon","iconAwaken","document","path","header","headerTemplate","st","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","c","count","text","sgt","unit","all_dmg_","on","dmg","charged_dmg_","eleMas_disp","eleMas","target","skill_dmg_","condStackPath","condStack","atkInc","critInc","critRate_","atkSelf","atkTeamDisp","atkTeam","unequal","atk","canShow","isTeamBuff","def_","normal_dmgInc","charged_dmgInc","crit_","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","shield","condWithShieldPath","condWithShield","protected","shield_","atkStacks","condPath","condNode","heal","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","ForestRegalia","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","MakhairaAquamarine","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","skill_dmgInc","emSrc","temSrc","stacks","condStacksPath","condStacks","eleMasbuff","stack","teamEleMasbuff","hp_","skill_critRate_","cd_Src","dmg_","normal_dmg_","plunging_dmg_","passiveRefine","stack_normal_dmg_","passive_dmg_","allElements","eleDmgDealtStack","stacksRefine","stacks_dmg_","allEle_dmg_","parseInt","moveSPD_","autoSrc","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","KagotsurubeIsshin","KeyOfKhajNisut","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HaranGeppakuFutsu","HarbingerOfDawn","IronSting","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SapwoodBlade","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","tr","dmg_Nodes","compareEq","atkDefInc","enerRech_","atk_disp","dmgInc","atk1","atk2","atk2_","stacksAttArr","stacksArr","baseAtk","stacksAtk","burst_critRate_","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","MissiveWindspear","Moonpiercer","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","StaffOfTheScarletSands","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","base_hp_","cond_dmg_","atk_s","atkSPD_s","eleMas2","condStatePath","condState","state_dmg_dict","evengleam","afterglow","dawnblaze","state_dmg_","state","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","allEle_dmg_arr","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","dmg_arr","normal_dmg_inc","charged_dmg_inc","normal_dmg_dec","charged_dmg_dec","refinementVals","bow","AlleyHunter","AmosBow","AquaSimulacra","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FadingTwilight","FavoniusWarbow","Hamayumi","HuntersBow","HuntersPath","KingsSquire","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","EndOfTheLine","WindblumeOde","sameElementCount","differentElementCount","dmgBonus","eleDmg","teamEmBuffValue","condChargedPath","condCharged","heal_","eleMasArr","anemo_dmg_disp","cryo_dmg_disp","geo_dmg_disp","hydro_dmg_disp","pyro_dmg_disp","dendro_dmg_disp","anemo_dmg_","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","dendro_dmg_","electro_dmg_disp","electro_dmg_","color","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","atk_Disp","refineInc","ApprenticesNotes","AThousandFloatingDreams","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","FruitOfFulfillment","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WineAndSong"],"sourceRoot":""}